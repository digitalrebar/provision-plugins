#!/bin/bash
#
# This template uses curtin to install and setup
# the device.
#
# Required Parameters:
# Optional Parameters:
#
# Parameter YAML format:
#
#

{{ if .Param "rs-debug-enable" }}set -x{{ end }}
set -e

# This will contain a token appropriate for the path being
# used below.  Either a create or update/show token

# Ubuntu Path is different than Centos Path - fix it.
export PATH=$PATH:/usr/bin:/usr/sbin:/bin:/sbin

OSTYPE={{.Param "image-deploy/image-os"}}
OSSUBTYPE={{.Param "image-deploy/image-os-subtype"}}
IMAGETYPE={{.Param "image-deploy/image-type"}}

# Make drpcli phone home tgz and curtin dir
rm -rf /tmp/drpcli
mkdir -p /tmp/drpcli/usr/local/bin
mkdir -p /tmp/drpcli/curtin

# Set up the curtin files
if [[ $OSTYPE == linux ]] ; then
    # Agent in reasonable place
    cp /usr/local/bin/drpcli /tmp/drpcli/usr/local/bin
    chmod +x /tmp/drpcli/usr/local/bin/*

    cp linux/* /tmp/drpcli/curtin
    if [[ $OSSUBTYPE == "raw" ]] ; then
        cp raw/* /tmp/drpcli/curtin
    fi
    if [[ $OSSUBTYPE == "other" ]] ; then
        cp other/* /tmp/drpcli/curtin
        cd /tmp/drpcli/curtin
        ln -s python_wrapper curtin-hooks
        cd -
    fi
    chmod +x /tmp/drpcli/curtin/*

    # Cloud-init hackery
{{ if .Param "image-deploy/use-cloud-init" }}
{{ $ci_url := .ParamExpand "image-deploy/cloud-init-base-url" }}
{{ $ci_ran := "NoCloud" }}
{{ $ci_net := or (hasPrefix "http://" $ci_url) (hasPrefix "https://" $ci_url) }}
{{ if $ci_net }}
{{ $ci_ran := "NoCloudNet" }}
{{ end }}
    mkdir -p /tmp/drpcli/etc/cloud/cloud.cfg.d
    cat > /tmp/drpcli/etc/cloud/cloud.cfg.d/95_datasource.cfg <<EOFCFG
datasource_list: [ {{ $ci_ran }} ]
datasource:
  {{$ci_ran}}:
        seedfrom: "{{ $ci_url }}"
EOFCFG
{{ if not $ci_net }}
{{ $ci_file := trimPrefix "file://" $ci_url }}
    mkdir -p /tmp/drpcli{{$ci_file}}
    cat > /tmp/drpcli{{$ci_file}}meta-data <<EOFMETA
instance-id: {{.Machine.UUID}}
local-hostname: {{.Machine.Name}}
{{if .ParamExists "cloud-init/x509-certs"}}
x509: {{.Param "cloud-init/x509-certs"}}
{{end}}
{{ if .ParamExists "image-deploy/admin-username" }}
admin-username: "{{ .Param "image-deploy/admin-username" }}"
{{ end }}
{{ if .ParamExists "image-deploy/admin-password" }}
admin-password: "{{ .Param "image-deploy/admin-password" }}"
{{ end }}
public-keys:
{{if .ParamExists "access-keys"}}
{{range $key := .Param "access-keys"}}
- {{$key}}
{{end}}
{{end}}
EOFMETA
{{if .ParamExists "cloud-init/user-data"}}
    cat > /tmp/drpcli/curtin/user-data <<EOFUSER
{{.Param "cloud-init/user-data"}}
EOFUSER
{{else}}
    cat > /tmp/drpcli{{$ci_file}}user-data <<EOFUSER
#cloud-config
runcmd:
  - /curtin/drpcli-install.sh 2>/tmp/drpcli-install.err >/tmp/drpcli-install.out
EOFUSER
{{end}}
{{end}}
{{end}}

elif [[ $OSTYPE == windows ]] || [[ $OSTYPE == basic ]] ; then
    # Agent in reasonable place
    curl -g -s -f -L -o /tmp/drpcli/curtin/drpcli.exe "{{.ProvisionerURL}}/files/drpcli.amd64.windows"
    chmod 755 /tmp/drpcli/curtin/drpcli.exe

    # Add an unattended template
    {{if .ParamExists "image-deploy/windows-unattend-template"}}
    # Allow for an unattended xml to be added.
    mkdir -p "/tmp/drpcli/$(dirname "{{.Param "image-deploy/windows-unattend-path"}}")"
    cat > "/tmp/drpcli/{{.Param "image-deploy/windows-unattend-path"}}" <<EOF
{{.CallTemplate (.Param "image-deploy/windows-unattend-template") . }}
EOF
    {{end}}

    cp windows/* /tmp/drpcli/curtin
    chmod +x /tmp/drpcli/curtin/curtin-hooks

    # Cloud-init hackery
{{ if .Param "image-deploy/use-cloud-init" }}
{{ $ci_url := .ParamExpand "image-deploy/cloud-init-base-url" }}
{{ $ci_net := or (hasPrefix "http://" $ci_url) (hasPrefix "https://" $ci_url) }}
    mkdir -p "/tmp/drpcli/Program Files/Cloudbase Solutions/Cloudbase-Init/Python/Lib/site-packages/cloudbaseinit/metadata/services"
    cp /tmp/drpcli/curtin/cloudbase-rackn.py "/tmp/drpcli/Program Files/Cloudbase Solutions/Cloudbase-Init/Python/Lib/site-packages/cloudbaseinit/metadata/services/rackn.py"
    cd /tmp/drpcli/curtin
    ln -s curtin-windows-cloudinit-finalize finalize
    cd -
    chmod +x /tmp/drpcli/curtin/finalize
{{ if not $ci_net }}
{{ $ci_file := trimPrefix "file://" $ci_url }}
    mkdir -p /tmp/drpcli{{$ci_file}}
    cat > /tmp/drpcli{{$ci_file}}meta-data <<EOFMETA
instance-id: {{.Machine.UUID}}
local-hostname: {{.Machine.Name}}
{{ if .ParamExists "image-deploy/admin-username" }}
admin-username: "{{ .Param "image-deploy/admin-username" }}"
{{ end }}
{{ if .ParamExists "image-deploy/admin-password" }}
admin-password: "{{ .Param "image-deploy/admin-password" }}"
{{ end }}
{{if .ParamExists "cloud-init/x509-certs"}}
x509: {{.Param "cloud-init/x509-certs"}}
{{end}}
public-keys:
{{if .ParamExists "access-keys" -}}
{{range $key := .Param "access-keys" -}}
- {{$key}}
{{end}}
{{end}}
EOFMETA
{{if .ParamExists "cloud-init/user-data"}}
    cat > /tmp/drpcli{{$ci_file}}user-data <<EOFUSER
{{.Param "cloud-init/user-data"}}
EOFUSER
{{else}}
    cat > /tmp/drpcli{{$ci_file}}user-data <<EOFUSER
#cloud-config
runcmd:
  - /curtin/drpcli-install.bat
EOFUSER
{{end}}
{{end}}
{{end}}

elif [[ $OSTYPE == esxi ]] ; then
    echo "Deploying image for OS type:  ESXi"
    echo "DRPY rendered in image"

{{ if .ParamExists "esxi/drpy-log-level" }}
    cat > esxi/drpy.conf <<DRPEOF
{{ template "curtin-drpy-agent.conf.tmpl" . }}
DRPEOF
    cat > esxi/network-startup.sh <<NSEOF
{{ template "curtin-esxi-network-startup.sh.tmpl" . }}
NSEOF
    cp esxi/network-startup.sh esxi/network-startup.sh.bak
{{ else }}
    echo "ESXI-based image-deploys require the vmware plugin...  Please add and retry"
    exit 1
{{ end }}

    echo "Making empty onetime.tgz"
    rm -rf /tmp/image-deploy-esxi
    mkdir -p /tmp/image-deploy-esxi/var/lib/vmware/firstboot
    cd /tmp/image-deploy-esxi
    tar -zcvf /tmp/drpcli/onetime.tgz var
    cd -
    rm -rf /tmp/image-deploy-esxi

    cp esxi/* /tmp/drpcli/curtin
    chmod +x /tmp/drpcli/curtin/*
else
    echo "Unknown OS type: $OSTYPE"
    exit 1
fi

curtin_error_help() {
    local _code=$1
    case $_code in
        3)
            echo ""
            echo ">>> The following are the reported block devices in the system:"
            lsblk
            echo ""
            echo ">>> Errors similar to:"
            echo "  Command: curtin block-meta --device=/dev/sda simple"
            echo "  Exit code: 3"
            echo "...and/or..."
            echo "  /dev/sda had no syspath (/sys/class/block/sda)"
            echo ""
            echo ">>> May require setting the Param 'image-deploy/install-disk' to a different value for successful installation."
            echo ""
        ;;
    esac

    echo ">>> Curtin logs are available for debugging on the target machine in /tmp for"
    echo "    potential additional help."
    echo ""
}

cd /tmp/drpcli
tar -zcvf ../drpcli.tar.gz .
cd -
rm -rf /tmp/drpcli

if [[ ! -e /etc/resolv.conf ]] ; then
    touch /etc/resolv.conf
fi

{{ if .Param "curtin/debug" }}
CURTIN_DEBUG="-vvv"
{{else}}
CURTIN_DEBUG=""
{{end}}

if ! curtin $CURTIN_DEBUG install -c curtin_config.yaml ; then
    # Failure
    # Don't reboot so we can look at the logs in /tmp.
    curtin_error_help $?
    exit 1
fi

{{ if .Param "curtin/debug-deploy-pause" }}
SLP=5
NUM=0
ESC_CNT=360

ESC_SEC=$(expr $SLP \* $ESC_CNT)
ESC_MIN=$(expr $SLP \* $ESC_CNT / 60)

CNTRL="/tmp/curtin-debug-pause-deploy"
touch $CNTRL

echo ""
echo "'curtin/debug-pause-deploy' has been set to 'true', curtin deploy will pause"
echo "To resume normal workflow, remove the file '$CNTRL'"
echo ""

echo "Starting '$ESC_CNT' sleep loops of '$SLP' seconds per loop..."
while [[ -e "$CNTRL" ]]
do
  eval sleep ${SLP}
  NUM=$(expr $NUM + 1)
#  (( NUM++ ))
  printf "%s " $NUM
  [[ "$NUM" -ge "$ESC_CNT" ]] && { ESCAPE="yes"; break; }
done

echo ""

if [[ -z "$ESCAPE" ]]
then
  echo "The control file was removed ($CNTRL) - continuing on."
else
  echo "Escape timer expired at '$ESC_CNT' cycles of '$SLP' seconds."
  echo "seconds:  $ESC_SEC"
  echo "minutes:  $ESC_MIN"
  echo "Continuing on..."
  echo ""
fi

rm -f $CNTRL
{{end}}

exit 0
