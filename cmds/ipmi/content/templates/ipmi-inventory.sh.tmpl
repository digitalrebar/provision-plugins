#!/usr/bin/env bash
# Configure the IPMI subsystem

. helper

{{ if eq (.Param "rs-debug-enable") true -}}
set -x
{{end -}}

fail() {
    echo "Failed"
    exit 1
}

success() {
    echo "Success"
    exit 0
}

IPMI_FORCE_LAN_CHAN=0
IPMI_LAN_CHECK_START=1
IPMI_LAN_CHECK_END=11
{{if .ParamExists "ipmi/force-lan-chan"}}
IPMI_FORCE_LAN_CHAN={{.Param "ipmi/force-lan-chan"}}
IPMI_LAN_CHECK_START=$IPMI_FORCE_LAN_CHAN
IPMI_LAN_CHECK_END=$IPMI_FORCE_LAN_CHAN
{{end}}

declare -A quirk_data
declare -A mc_info
declare -A lan_info
declare -A lan6_info
lan_chan=0

quirklist=()
quirkid="UNKNOWN"

{{ template "ipmi-info-keys.sh.tmpl" . }}

#
# This routine will mark the parameters to skip IPMI on
# systems that don't have IPMI subsystems or fail.
#
disable_ipmi() {
    echo "IPMI Subsystem not available on this node."

    # Mark address as empty to make sure that actions aren't available.
    drpcli machines set $RS_UUID param ipmi/enabled to false
    drpcli machines remove $RS_UUID param ipmi/address || :
    [[ $IPMI_CONFIGURE_FAIL != true ]] && success || fail
}


load_ipmi() {
    echo "Loading IPMI modules"
    [[ -d /sys/module/ipmi_devintf ]] || modprobe ipmi_devintf &>/dev/null || :
    [[ -d /sys/module/ipmi_si ]] || modprobe ipmi_si &>/dev/null || :
    [[ -d /sys/module/ipmi_ssif ]] || modprobe ipmi_ssif &>/dev/null || :
    if ! [[ -d /sys/module/ipmi_si ||
            -d /sys/module/ipmi_devintf ||
            -d /sys/module/ipmi_ssif ]]; then
        echo "Failed to load ipmi kernel modules"
        disable_ipmi
        return
    fi
    [[ -e /dev/ipmi0 || -e /dev/ipmi/0 || -e /dev/ipmidev/0 ]] && return || :
    echo "No IPMI devices present"
    IPMI_CONFIGURE_FAIL=false
    disable_ipmi
}

tool() {
    [[ $ipmi_nodelay ]] || sleep 5
    if [[  "$@" =~ password ]] ; then
        echo "ipmitool password setting command"
    else
        echo "ipmitool $@"
    fi >&2
    ipmitool "$@"
}

{{ template "ipmi-process-quirks.sh.tmpl" . }}

# Load the ipmi layer
load_ipmi

# Get MC info
mc_info

{{ template "ipmi-load-quirks.sh.tmpl" . }}

declare -A p2li=(['ipaddr']='ipmi/address'
      ['netmask']='ipmi/netmask'
      ['ipsrc']='ipmi/ipsrc'
      ['defgw ipaddr']='ipmi/gateway')

# Get Lan Info
lan_info
lan6_info

if [[ ${lan_info['macaddr']} != "" ]] ; then
    drpcli machines set $RS_UUID param ipmi/macaddr to "${lan_info['macaddr']}"
fi

if [[ ${lan_info['ipaddr']} && ${lan_info['ipaddr']} != '0.0.0.0' || ${lan6_info['ipaddr']} ]]; then
   drpcli machines set $RS_UUID param ipmi/enabled to true
fi

if [[ ${lan_info['defgw ipaddr']} && {lan_info['defgw ipaddr']} != '0.0.0.0' ]]; then
    use_v4=true
fi

if [[ ${lan6_info['defgw ipaddr']} && {lan6_info['defgw ipaddr']} != '::' ]]; then
    use_v6=true
fi

if [[ $use_v4 && $use_v6 ]]; then
    case "{{.Param "ipmi/prefer-v6"}}" in
        true) unset use_v4;;
        false) unset use_v6;;
    esac
fi

{{ if .ParamExists "ipmi/force-protocol" }}
{{ if eq (.Param "ipmi/force-protocol") "v4" }}
unset use_v6
use_v4=true
{{ end }}
{{ if eq (.Param "ipmi/force-protocol") "v6" }}
unset use_v4
use_v6=true
{{ end }}
{{ end }}

for k in "${!p2li[@]}"; do
    if [[ ${lan_info["$k"]} ]]; then
        drpcli machines set "$RS_UUID" param "${p2li["$k"]}-v4" to "\"${lan_info["$k"]}\""
        if [[ $use_v4 ]]; then
            drpcli machines set "$RS_UUID" param "${p2li["$k"]}" to "\"${lan_info["$k"]}\""
        fi
    fi
    if [[ ${lan6_info["$k"]} ]]; then
        drpcli machines set "$RS_UUID" param "${p2li["$k"]}-v6" to "\"${lan6_info["$k"]}\""
        if [[ $use_v6 ]]; then
            drpcli machines set "$RS_UUID" param "${p2li["$k"]}" to "\"${lan6_info["$k"]}\""
        fi
    fi
done

success

