#!/usr/bin/env bash
# Configure the IPMI subsystem

. helper

{{ if eq (.Param "rs-debug-enable") true -}}
set -x
{{end -}}

fail() {
    echo "Failed"
    exit 1
}

success() {
    echo "Success"
    exit 0
}

# Who am I
export RS_UUID={{.Machine.Uuid}}
export RS_TOKEN={{.GenerateToken}}
export RS_ENDPOINT={{.ApiURL}}

# Set some sane defaults
IPMI_CONFIGURE_ADDRESS=""
IPMI_CONFIGURE_NETMASK=""
IPMI_CONFIGURE_GATEWAY=""
IPMI_CONFIGURE_PORT=""

IPMI_CONFIGURE_USERID=""

IPMI_GENERATE_CSR={{.Param "ipmi/configure/generate-csr"}}

# Gather Variables for configuration
IPMI_SERVICE_USER={{.Param "ipmi/service-user"}}
IPMI_CONFIGURE_FAIL={{.Param "ipmi/configure/no-bmc-fatal"}}
IPMI_CONFIGURE_NETWORK={{.Param "ipmi/configure/network"}}
IPMI_CONFIGURE_RESERVE_IP={{.Param "ipmi/configure/reserve-ip"}}
IPMI_CONFIGURE_IP_MODE={{.Param "ipmi/configure/ip-mode"}}
{{if .ParamExists "ipmi/configure/address"}}
IPMI_CONFIGURE_ADDRESS={{.Param "ipmi/configure/address"}}
{{end}}
{{if .ParamExists "ipmi/configure/netmask"}}
IPMI_CONFIGURE_NETMASK={{.Param "ipmi/configure/netmask"}}
{{end}}
{{if .ParamExists "ipmi/configure/gateway"}}
IPMI_CONFIGURE_GATEWAY={{.Param "ipmi/configure/gateway"}}
{{end}}
{{if .ParamExists "ipmi/configure/port"}}
IPMI_CONFIGURE_PORT={{.Param "ipmi/configure/port"}}
{{end}}

IPMI_CONFIGURE_USER={{.Param "ipmi/configure/user"}}
IPMI_CONFIGURE_USERNAME={{.Param "ipmi/configure/username"}}
IPMI_CONFIGURE_PASSWORD={{.Param "ipmi/configure/password"}}
{{if .ParamExists "ipmi/configure/userid"}}
IPMI_CONFIGURE_USERID={{.Param "ipmi/configure/userid"}}
{{end}}

{{if .Param "ipmi/configure/generate-random-password" }}
# are we using the default password, we need to regenerate it
if [[ "$IPMI_CONFIGURE_PASSWORD" == "cr0wBar!" ]] ; then
    IPMI_CONFIGURE_PASSWORD=$(
python -c '
{{ template "ipmi-passgen.py.tmpl" .}}
')
    drpcli machines set $RS_UUID param ipmi/configure/password to "$IPMI_CONFIGURE_PASSWORD" >/dev/null
else
    echo "The configured password is already set to a non-default value.  Using it instead."
fi
{{ end }}

# Results variables
IPMI_ENABLED=false
IPMI_ADDRESS=""

{{if .ParamExists "ipmi/address"}}
IPMI_ADDRESS={{.Param "ipmi/address"}}
{{end}}
{{if .ParamExists "ipmi/username"}}
IPMI_USERNAME={{.Param "ipmi/username"}}
{{end}}
{{if .ParamExists "ipmi/password"}}
IPMI_PASSWORD={{.Param "ipmi/password"}}
{{end}}

IPMI_FORCE_LAN_CHAN=0
IPMI_LAN_CHECK_START=1
IPMI_LAN_CHECK_END=11
{{if .ParamExists "ipmi/force-lan-chan"}}
IPMI_FORCE_LAN_CHAN={{.Param "ipmi/force-lan-chan"}}
IPMI_LAN_CHECK_START=$IPMI_FORCE_LAN_CHAN
IPMI_LAN_CHECK_END=$IPMI_FORCE_LAN_CHAN
{{end}}

declare -A quirk_data
declare -A mc_info
declare -A lan_info
lan_chan=0

quirklist=()
quirkid="UNKNOWN"

{{ template "ipmi-info-keys.sh.tmpl" . }}

{{ template "ipmi-vendor.sh.tmpl" . }}

#
# This routine will mark the parameters to skip IPMI on
# systems that don't have IPMI subsystems or fail.
#
disable_ipmi() {
    echo "IPMI Subsystem not available on this node."

    # Mark address as empty to make sure that actions aren't available.
    drpcli machines set $RS_UUID param ipmi/enabled to false
    if ! drpcli machines remove $RS_UUID param ipmi/address; then
        true
    fi

    if [[ $IPMI_CONFIGURE_FAIL == true ]] ; then
        fail
    else
        success
    fi
}


load_ipmi() {
    echo "Loading IPMI modules"
    [[ -d /sys/module/ipmi_devintf ]] || modprobe ipmi_devintf &>/dev/null || :
    [[ -d /sys/module/ipmi_si ]] || modprobe ipmi_si &>/dev/null || :
    [[ -d /sys/module/ipmi_ssif ]] || modprobe ipmi_ssif &>/dev/null || :
    if ! [[ -d /sys/module/ipmi_si ||
            -d /sys/module/ipmi_devintf ||
            -d /sys/module/ipmi_ssif ]]; then
        echo "Failed to load ipmi kernel modules"
        disable_ipmi
        return
    fi
    [[ -e /dev/ipmi0 || -e /dev/ipmi/0 || -e /dev/ipmidev/0 ]] && return || :
    echo "No IPMI devices present"
    IPMI_CONFIGURE_FAIL=false
    disable_ipmi
}

tool() {
    if [[ $ipmi_nodelay == "" ]] ; then
        sleep 5
    fi
    if ! [[  "$@" =~ password ]] ; then
        echo "ipmitool $@"
    else
        echo "ipmitool password setting command"
    fi >&2
    ipmitool "$@"
}

# Trim is in here
{{ template "ipmi-process-quirks.sh.tmpl" . }}

# Load the ipmi layer
load_ipmi

# Get MC info
mc_info

# Get Lan Info
lan_info

{{ template "ipmi-load-quirks.sh.tmpl" . }}

id_for_user() {
    tool user list $lan_chan |awk "\$2 == \"$1\" { print \$1 }"
}

declare -A ipmi_user

parse_ipmitool_user_line() {
    local line id user callin link msg priv
    line="$*"
    ipmi_user["id"]=$(trim ${line:0:4})
    case $(trim ${line:4:17}) in
        ''|'(Empty User)') ipmi_user["user"]='';;
        *) ipmi_user["user"]="$(trim ${line:4:17})";;
    esac
    case $(trim ${line:21:8}) in
        "true"|"on") ipmi_user["callin"]="on";;
        *) ipmi_user["callin"]="off";;
    esac
    case $(trim ${line:21:8}) in
        "true"|"on") ipmi_user["link"]="on";;
        *) ipmi_user["link"]="off";;
    esac
    case $(trim ${line:40:11}) in
        "true"|"on") ipmi_user["msg"]="on";;
        *) ipmi_user["link"]="off";;
    esac
    case $(trim ${line:51}) in
        "NO ACCESS") ipmi_user["priv"]="15";;
        "OEM"*) ipmi_user["priv"]="5";;
        "ADMINISTRATOR") ipmi_user["priv"]="4";;
        "OPERATOR") ipmi_user["priv"]="3";;
        "USER") ipmi_user["priv"]="2";;
        "CALLBACK") ipmi_user["priv"]="1";;
    esac
}

first_free_id() {
    local line id user
    while read line; do
        parse_ipmitool_user_line "$line"
        ## All sorts of things rely on user 1 being left alone.
        [[ ${ipmi_user["id"]} = 1 ]] && continue
        ## immutable root == go on toi the next ID.
        [[ ${ipmi_user["id"]} = 2 && ($ipmi_immutable_rootname == true || $ipmi_immutable_root == true) ]] && continue
        # If there is a named user here, continue
        [[ ${ipmi_user["user"]} ]] && continue
        echo ${ipmi_user["id"]}
        return
    done < <(tool user list $lan_chan)
    [[ $ipmi_immutable_rootname == true || $ipmi_immutable_root == true ]] && echo 3 || echo 2
}

configure_user() {
    # $1 = username
    # $2 = password
    # $3 = userid (optional)
    local existing_id configure_id starting_id
    existing_id=$(id_for_user "$1")
    configure_id="$3"
    if [[ $configure_id && $existing_id && $configure_id != $existing_id ]]; then
        echo "Requested username is already on the system.  Using that ID instead of requested one"
        configure_id="$existing_id"
    elif [[ $existing_id ]]; then
        configure_id="$existing_id"
    fi
    [[ $configure_id ]] || configure_id=$(first_free_id)
    if [[ $configure_id = 2 && $ipmi_immutable_root == true ]]; then
        echo "WARNING: Trying to modify the base account on a system with immutable ROOT"
        echo "This may not work!!"
    fi
    [[ $existing_id ]] || tool user set name $configure_id "$1"
    tool user set password $configure_id "$2"
    tool user priv $configure_id 4 $lan_chan
    [[ $ipmi_crossed_access_channels = true ]] || \
        tool channel setaccess $lan_chan $configure_id callin=on link=on ipmi=on privilege=4
    tool user enable $configure_id

    vendor_add_user

    configured=true
}


random_password() {
    (< /dev/urandom tr -dc '[:alnum:]' | head -c10) || :
}

configured=false

ipmi_user_configured() {
    drpcli machines runaction "$RS_UUID" powerstatus ipmi/username "$1" ipmi/password "$2" &>/dev/null || false
}

{{ if (.Param "ipmi/configure/network") -}}
# Do the config actions - configure network
echo "Configure Network"

# First is this a dell system.  If so, set shared or dedicated.
if [[ $ipmi_dell_dedicated_nic == true && $IPMI_CONFIGURE_PORT != "" ]] ; then
    if [[ $(tool delloem lan get) != $IPMI_CONFIGURE_PORT ]]; then
        echo "Setting DELL iDrac port to $IPMI_CONFIGURE_PORT mode"
        tool delloem lan set $IPMI_CONFIGURE_PORT
        configured=true
    fi
fi

if [[ $IPMI_CONFIGURE_RESERVE_IP == true && $IPMI_CONFIGURE_ADDRESS != "" ]] ; then
    # Need to reserve an IP.
    MACADDR=${lan_info["macaddr"]}
    if [[ $(drpcli reservations show $IPMI_CONFIGURE_ADDRESS |jq -r '.Token' ) != $MACADDR ]]; then
        data="{ \"Strategy\": \"MAC\", \"Addr\": \"$IPMI_CONFIGURE_ADDRESS\", \"Token\": \"$MACADDR\" }"
        drpcli reservations create "$data"
        echo "Reserving (specified) $IPMI_CONFIGURE_ADDRESS for ${lan_info["macaddr"]}"
    fi
elif [[ $IPMI_CONFIGURE_RESERVE_IP == true && $IPMI_CONFIGURE_IP_MODE == "static" ]] ; then

    echo "This mode is not currently supported!!!"
    IPMI_CONFIGURE_FAIL=true
    disable_ipmi

    # We are told to pick an address from something some how.
    IPMI_CONFIGURE_ADDRESS="FILL IN SOMETHING HERE ONE DAY"
    MACADDR=${lan_info["macaddr"]}
    data="{ \"Strategy\": \"MAC\", \"Addr\": \"$IPMI_CONFIGURE_ADDRESS\", \"Token\": \"$MACADDR\" }"
    drpcli reservations create "$data"
    echo "Reserving (static) $IPMI_CONFIGURE_ADDRESS for ${lan_info["macaddr"]}"
fi


if [[ $IPMI_CONFIGURE_IP_MODE == dhcp ]] ; then
    if [[ ${lan_info["ipsrc"]} != "DHCP Address" ]] ; then
        tool lan set $lan_chan ipsrc dhcp
        configured=true
    fi
elif [[ $IPMI_CONFIGURE_IP_MODE == "static" ]] ; then
    if [[ $IPMI_CONFIGURE_ADDRESS == "" || $IPMI_CONFIGURE_NETMASK == "" ]] ; then
        echo "Address and Mask must be specified to configure IPMI IP address"
        IPMI_CONFIGURE_FAIL=true
        disable_ipmi
    fi

    if [[ ${lan_info["ipsrc"]} != "Static Address" ]] ; then
        tool lan set $lan_chan ipsrc static
        configured=true
        lan_info
    fi

    if [[ ${lan_info["ipaddr"]} != $IPMI_CONFIGURE_ADDRESS ]] ; then
        tool lan set $lan_chan ipaddr $IPMI_CONFIGURE_ADDRESS
        configured=true
        drpcli machines set $RS_UUID param ipmi/address to "$IPMI_CONFIGURE_ADDRESS"
    fi
     if [[ ${lan_info["netmask"]} != $IPMI_CONFIGURE_NETMASK ]] ; then
        tool lan set $lan_chan netmask $IPMI_CONFIGURE_NETMASK
        configured=true
    fi
    if [[ ${lan_info["defgw ipaddr"]} != $IPMI_CONFIGURE_GATEWAY && $IPMI_CONFIGURE_GATEWAY != "" ]] ; then
        tool lan set $lan_chan defgw ipaddr $IPMI_CONFIGURE_GATEWAY
        configured=true
    fi
fi
{{ else }}
echo "ipmi/configure/network is not true, skipping network configuation"
{{- end }}

{{ if (.Param "ipmi/configure/user") -}}
# Do the config actions - configure user
if ! ipmi_user_configured "$IPMI_CONFIGURE_USERNAME" "$IPMI_CONFIGURE_PASSWORD"; then
    echo "Configure USER account $IPMI_CONFIGURE_USERNAME"
    configure_user "$IPMI_CONFIGURE_USERNAME" "$IPMI_CONFIGURE_PASSWORD" $IPMI_CONFIGURE_USERID
fi
if [[ $IPMI_SERVICE_USER != true ]]; then
    drpcli machines set $RS_UUID param ipmi/username to "$IPMI_CONFIGURE_USERNAME"
    drpcli machines set $RS_UUID param ipmi/password to "$IPMI_CONFIGURE_PASSWORD"
fi
{{ else }}
echo "ipmi/configure/user not set, skipping user creation"
{{- end }}
{{ if (.Param "ipmi/service-user") -}}
if ! ipmi_user_configured dr-provision "$IPMI_PASSWORD"; then
    echo "Creating service account for dr-provision"
    auto_password="dR$(random_password)0!"
    configure_user dr-provision "$auto_password"
    drpcli machines set $RS_UUID param ipmi/username to dr-provision
    drpcli machines set $RS_UUID param ipmi/password to "$auto_password"
else
    drpcli machines set $RS_UUID param ipmi/username to dr-provision
    drpcli machines set $RS_UUID param ipmi/password to "$IPMI_PASSWORD"
fi
{{ else }}
echo "ipmi/service-user not set, skipping service user creation"
{{- end }}

# Configure the DNS and HOSTNAME
# This is independent of the rest of the network config, as it does not affect
# basic connectifity to the BMC.
vendor_set_hostname_dns

if [[ $configured == true && $ipmi_hard_reset_after_config == true ]] ; then
    echo "BMC requires hard reset after config!!"
    echo "Sleeping 30"
    sleep 30
    echo "Resetting BMC"
    tool mc reset cold
    echo "Sleeping 30"
    sleep 30
fi

# Re-get the lan info
lan_info
IPMI_ADDRESS=${lan_info["ipaddr"]}
IPMI_NETMASK=${lan_info["netmask"]}
IPMI_GATEWAY=${lan_info["defgw ipaddr"]}
IPMI_MACADDR=${lan_info["macaddr"]}
IPMI_IPSRC=${lan_info["ipsrc"]}

# Record parameters.
drpcli machines set $RS_UUID param ipmi/enabled to true
if [[ $IPMI_ADDRESS != "" ]] ; then
    drpcli machines set $RS_UUID param ipmi/address to "$IPMI_ADDRESS"
{{- if (.Param "ipmi/configure/network") }}
    # We weren't told the IP, but DHCP, bind it.
    if [[ $IPMI_CONFIGURE_RESERVE_IP == true && $IPMI_CONFIGURE_ADDRESS == "" ]] ; then
        MACADDR=${lan_info["macaddr"]}
        if [[ $(drpcli reservations show $IPMI_ADDRESS |jq -r '.Token') != $MACADDR ]]; then
            echo "Reserving (dhcp) $IPMI_ADDRESS for ${lan_info["macaddr"]}"
            data="{ \"Strategy\": \"MAC\", \"Addr\": \"$IPMI_ADDRESS\", \"Token\": \"$MACADDR\" }"
            drpcli reservations create "$data"
        fi
    fi
{{- end }}
fi
if [[ $IPMI_NETMASK != "" ]] ; then
    drpcli machines set $RS_UUID param ipmi/netmask to "$IPMI_NETMASK"
fi
if [[ $IPMI_GATEWAY != "" ]] ; then
    drpcli machines set $RS_UUID param ipmi/gateway to "$IPMI_GATEWAY"
fi
if [[ $IPMI_MACADDR != "" ]] ; then
    drpcli machines set $RS_UUID param ipmi/macaddr to "$IPMI_MACADDR"
fi
if [[ $IPMI_IPSRC != "" ]] ; then
    drpcli machines set $RS_UUID param ipmi/ipsrc to "$IPMI_IPSRC"
fi

if [[ "$IPMI_GENERATE_CSR" != "false" ]] ; then
    vendor_generate_csr
{{ if .ParamExists "ipmi/configure/post-csr-task" }}
    drpcli machines inserttask $RS_UUID "{{.Param "ipmi/configure/post-csr-task"}}" 0
{{ end }}
fi

{{ if .ParamExists "ipmi/configure/certificate" }}
    vendor_install_cert
{{ else }}
    echo "ipmi/configure/certificate not defined - not installing certificate"
{{ end }}

success

