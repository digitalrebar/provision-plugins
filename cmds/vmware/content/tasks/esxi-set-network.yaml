---
Name: "esxi-set-network"
Description: "Set the network components of ESXi"
Documentation: |
  Configure the ESXi network based on the various param values
  defined with names ``esxi/network-*``.

Meta:
  icon: "cloud"
  color: "yellow"
  title: "Digital Rebar"
Templates:
  - Name: "esxi-params.py"
    ID: "esxi-params.py.tmpl"
    Path: "/tmp/esxi-params.py"
  - Name: "esxi-render-network-data.sh.tmpl"
    ID: "esxi-render-network-data.sh.tmpl"
  - Name: "esxi-set-address-field.py"
    Contents: |
      #!/usr/bin/python
      # python3 version

      # Update Machine Address to match the new address

      import os, urllib, urllib.request, socket, ssl, time
      url = '{{.ApiURL}}/api/v3/machines/{{.Machine.UUID}}'

      {{ if .Param "esxi/skip-update-address" }}
      print('"esxi/skip-update-address" is set to "true" (the default value), no address update performed.')
      exit(0)
      {{ end }}

      {{ if .ParamExists "esxi/network-firstboot-ipaddr" }}
      # There is no DRP Runner for ESXi, so we don't have post-OS install control.
      # Force the machine to empty workflow, none stage, and the local bootenv.
      patch = b'''
      [
      {"op":"replace","path":"/Address","value":"{{.Param "esxi/network-firstboot-ipaddr"}}"}
      ]
      '''
      req = urllib.request.Request(url, method='PATCH',data=patch)
      req.add_header('Content-Type', 'application/json')
      req.add_header('Authorization','Bearer {{.GenerateInfiniteToken}}')
      urllib.request.urlopen(req,context=ssl.SSLContext(ssl.PROTOCOL_SSLv23))
      {{ else }}
      # Nothing to do.
      exit(0)
      {{ end }}
  - Name: "esxi-set-network.sh"
    Contents: |
      #!/usr/bin/env sh
      # set firstboot network configuration settings

      {{ if eq (.Param "rs-debug-enable") true }}set -x{{ end }}

      VMK="{{ .Param "esxi/network-firstboot-vmk" }}"

      ###
      #  Handle setting VLAN tagged portgroups if requested
      ###
      {{ if .ParamExists "esxi/network-firstboot-vlan" -}}
      VLAN_MGMT={{ .Param "esxi/network-firstboot-vlan" }}
      SET_VLAN_MGMT="esxcli network vswitch standard portgroup set --portgroup-name=\"Management Network\" --vlan-id=$VLAN_MGMT"
      {{ end -}}
      {{ if .ParamExists "esxi/network-firstboot-vlan-vm-network" -}}
      VLAN_VM={{ .Param "esxi/network-firstboot-vlan-vm-network" }}

      if [[ ${VLAN_VM} = "management" ]]
      then
        if [[ "$VLAN_MGMT" != "" ]] ; then
          # set to same value as Management Network VLAN
          if [[ $VLAN_MGMT -ge 0 && $VLAN_MGMT -le 4096 ]]
          then
            VLAN_VM=$VLAN_MGMT
            SET_VLAN_VM="esxcli network vswitch standard portgroup set --portgroup-name=\"VM Network\" --vlan-id=$VLAN_VM"
          else
            echo "FATAL: Requested 'VM Network' portgroup be set to value of 'Management"
            echo "       Network' VLAN - but Management VLAN did not validate to 0-4096"
            echo "       ** We should never have gotten here ... :( **"
            exit 1
          fi
        fi
      elif [[ $VLAN_VM -ge 0 && $VLAN_VM -le 4096 ]]
      then
        # valid VLAN value
        SET_VLAN_VM="esxcli network vswitch standard portgroup set --portgroup-name=\"VM Network\" --vlan-id=$VLAN_VM"
      else
        echo "FATAL: Requested portgroup 'VM Network' be set to something, but failed"
        echo "       validation checks.  Must be 'management' or range between the"
        echo "       numbers '0-4095'"
        exit 1
      fi
      {{ end -}}

      {{ if .ParamExists "esxi/network-firstboot-mtu" -}}
      UPLINK=$(esxcfg-vswitch --list | grep "Management Network" | head -1 | awk ' { print $NF } ')
      VSWITCH=$(esxcfg-vswitch --list | grep -v "^ " | grep "${UPLINK}" | head -1 | awk ' { print $1 } ')
      SET_MTU_VSW="esxcfg-vswitch --mtu={{ .Param "esxi/network-firstboot-mtu" }} $VSWITCH"
      SET_MTU_VMK="esxcli network ip interface set --mtu={{ .Param "esxi/network-firstboot-mtu" }} --interface-name=$VMK"
      {{ end -}}

      [[ -n "$SET_VLAN_MGMT" ]] && eval ${SET_VLAN_MGMT}
      [[ -n "$SET_VLAN_VM"   ]] && eval ${SET_VLAN_VM}
      [[ -n "$SET_MTU_VSW"   ]] && eval ${SET_MTU_VSW}
      [[ -n "$SET_MTU_VMK"   ]] && eval ${SET_MTU_VMK}

      {{ if eq (.Param "esxi/network-firstboot-type") "manual" }}

      IP="{{ .Param "esxi/network-firstboot-ipaddr" }}"
      NM="{{ .Param "esxi/network-firstboot-netmask" }}"
      GW="{{ .Param "esxi/network-firstboot-gateway" }}"
      for CHECK in "ipaddr:$IP" "netmask:$NM" "gateway:$GW" "vmkernel_interface:$VMK"
      do
        T=$(echo $CHECK | cut -d":" -f1)
        V=$(echo $CHECK | cut -d":" -f2)
        [[ -z "$V" ]] && (echo "FATAL: Required value ('$T') missing for 'manual' network config."; exit 1)
      done
      esxcli network ip interface ipv4 set --type=static --interface-name="${VMK}" --ipv4="${IP}" --netmask="${NM}" --gateway="${GW}"
      esxcfg-route ${GW}
      esxcli system syslog reload
      /bin/services.sh restart
      {{ template "esxi-service-verify.sh.tmpl" . }}

      {{ else if eq (.Param "esxi/network-firstboot-type") "dhcp" -}}

      esxcli network ip interface ipv4 set --interface-name=${VMK} --type=dhcp
      esxcli system syslog reload
      /bin/services.sh restart
      {{ template "esxi-service-verify.sh.tmpl" . }}
      {{ else -}}
      echo "WARNING: 'esxi/network-firstboot-type' unsupported ... ('{{ .Param "esxi/network-firstboot-type" }}')."
      {{ end -}}

      exit 0

