#!/usr/bin/env bash
# Attempts to automatically select ESXI BootEnv version, or set to Operator defined version

###
#  This tool selects the VMware ESXi BootEnv version to install on the system.
#  The operator may specify a precise version via the use of the "vmware/esxi-version"
#  Param (which is an enumerated list), or via use of the override Param if the
#  version is not listed in the enum list ("vmware/esxi-version-override").
#
#  The operator also has the choice to set "vmware/esxi-version" value to "select-vendor"
#  and the map in the "vmware/esxi-version-vendor-map" will be used to set which
#  vendor specific BootEnv/ISO to use.
#
#  REQUIRES:  DRP Endpoint version v3.13.7 / v3.14.0 and newer
###
xiterr() { [[ "$1" =~ ^[0-9]+$ ]] && { XIT=$1; shift; } || XIT=1; printf "FATAL: $*\n"; exit $XIT; }
{{ template "setup.tmpl" . }}

set -e

NEED_TO_SET_VENDOR="false"
SUPPORTED_VENDORS="cisco dell fujitsu hitachi hpe lenovo nec vmware"
MATCHED=false

{{ if .ParamExists "vmware/esxi-version-override" -}}
BOOTENV="{{ .Param "vmware/esxi-version-override"}}"
NEED_TO_SET_VENDOR="true"
{{ else -}}
BOOTENV="{{ .Param "vmware/esxi-version"}}"

###
#  handle the old default mapping for some customers ('esxi-670u1') by
#  remapping it to our new default name/version
###
if [[ "$BOOTENV" == "esxi-670u1" ]]
then
  echo "Old plugin version BootEnv name specified ('esxi-670u1')."
  echo "Remapping 'esxi-670u1' to new BootEnv name 'esxi_670u1-10302608_vmware'"
  BOOTENV="esxi_670u1-10302608_vmware"
fi

if [[ "$BOOTENV" == "select-vendor" ]]
then
  # operator wants vendor magically selected based on hardware mfg and map
  mfgr="$(echo \"$(drpcli gohai | jq -r '.DMI | .System | .Manufacturer')\" | tr '[:upper:]' '[:lower:]')"
  model="$(echo \"$(drpcli gohai |jq -r '.DMI | .System | .ProductName')\" | tr '[:upper:]' '[:lower:]')"
  case $mfgr in
    *dell*)       VENDOR="dell"    ;;
    *hp*)         VENDOR="hpe"     ;;
    *nec*)        VENDOR="nec"     ;;
    *fujitsu*)    VENDOR="fujitsu" ;;
    *lenovo*)     VENDOR="lenovo"  ;;
    *cisco*)      VENDOR="cisco"   ;;
    *supermicro*) VENDOR="generic" ;;
    *red\ hat*)
      case $model in
        *kvm*)    VENDOR="generic" ;;
        *)        VENDOR="generic" ;;
      esac
      ;;
    *hitachi*)    VENDOR="hitachi"
        # <<<UNFINISHED>>> need some form of gohai to match model or similar
        # defaulting for now:
        MODEL="ha8000v-gen10"
        #MODEL="blade-ha8000"
      ;;
    *) echo "No idea how to install ESXi for identified manufactuer '$mfgr' - selecting generic bootenv"
        VENDOR="generic"
      ;;
  esac

  echo ">>> Hardware vendor identified as:  $VENDOR"
  [[ -n "$MODEL" ]] && echo ">>> Model identified as:  $MODEL"
  [[ -n "$MODEL" ]] && MODEL=" and .model == \"$MODEL\""

  BE=$(echo '{{ .ParamAsJSON "vmware/esxi-version-vendor-map" }}' \
    | jq -r ".[] | select((.mfg == \"${VENDOR}\")${MODEL}) | .bootenv")
  BE_COUNT=$(echo $BE | wc -w)
  MATCHED="true"
  BOOTENV="${BE}"
  NEED_TO_SET_VENDOR="false"
else
  NEED_TO_SET_VENDOR="true"
fi

{{ end -}}

[[ "$BE_COUNT" -gt 1 ]] && xiterr 1 "Matched more than 1 bootenv, likely error in vendor mappings Param."
[[ -z "$BOOTENV" ]] && xiterr 1 "Bootenv is unset, this shouldn't have happend."

if [[ "$NEED_TO_SET_VENDOR" == "true" ]]
then
  echo "Attempting to match vendor from Bootenv since manual or preset Bootenv specified."
  for SV in $SUPPORTED_VENDORS
  do
    [[ "$BOOTENV" =~ $SV ]] && { VENDOR=$SV; MATCHED=true; break; }
  done
fi

if [[ "$MATCHED" == "false" ]]
then
  echo "!!! Unable to match VENDOR for Bootenv named '$BOOTENV' !!!"
  echo "VENDOR list tried matching against is '$SUPPORTED_VENDORS'"
  echo "Setting VENDOR to 'generic'."
  VENDOR="generic"
else
  echo ">>> Matched '$VENDOR' for specified Bootenv ('$BOOTENV')."
fi

[[ -z "$VENDOR" ]] && xiterr 1 "VENDOR variable is empty, this shouldn't have happend."

if [[ "$BOOTENV" =~ -install$ ]]
then
  echo "Specified bootenv ends with '-install', stripping it off."
  BOOTENV=$(echo $BOOTENV | sed 's/-install$//g')
fi

echo ">>> Requesting install of BootEnv: '$BOOTENV'"

# test media Install URL is available
check_media(){
  INST="{{.ProvisionerURL}}/$BOOTENV/install"
  if ( curl -fsSL ${INST} > /dev/null 2>&1  )
  then
    echo "BootEnv install media is available via '$INST'" ${HIDE_OUTPUT}
  else
    echo ">>> Unable to find BootEnv install media at '$INST'."
    echo ">>> Did you upload the BootEnv ISO or set the mirror correctly?"
    if [[ "$BOOT_INSTALL" != "esxi-install" ]] ; then
      exit 1
    else
      echo "WARNING: May not have been exploded yet."
    fi
  fi
}

BOOT_INSTALL="${BOOTENV}-install"
if ( drpcli bootenvs exists $BOOT_INSTALL > /dev/null 2>&1 || true )
then
  HIDE_OUTPUT=' > /dev/null'
  [[ $RS_DEBUG_ENABLE ]] && HIDE_OUTPUT=""

  # test that our ISO exists and has been exploded - or the mirror content is available
  if [[ "$BOOT_INSTALL" != "esxi-install" ]] ; then
    ISO=$(drpcli bootenvs show $BOOT_INSTALL | jq -r '.OS.IsoFile')
  else
    ISO=$(drpcli machines get {{.Machine.UUID}} param bootenv-customize --aggregate | jq '.["esxi-install"].OS.IsoFile' -r)
    BOOTENV=$(drpcli machines get {{.Machine.UUID}} param bootenv-customize --aggregate | jq '.["esxi-install"].OS.Name' -r)
  fi
  if [[ -n "$ISO" && $(drpcli isos exists $ISO 2> /dev/null ) ]]
  then
    echo "ISO media for BootEnv '$BOOTENV' exists." ${HIDE_OUTPUT}
  else
    echo ">>> NOTICE:  No ISO media for BootEnv '$BOOTENV' found via DRP Endpoint."
  fi

  # Ignore esxi-install bootenvs
  check_media

  eval drpcli machines set {{.Machine.UUID}} param "esxi/selected-vendor" to ${VENDOR}${HIDE_OUTPUT}
  echo "Successfully set machine param 'esxi/selected-vendor' to '${VENDOR}'"
  eval drpcli machines tasks add {{.Machine.UUID}} at 0 bootenv:${BOOT_INSTALL}${HIDE_OUTPUT}
  echo "Successfully set machine Bootenv to '${BOOT_INSTALL}'"
else
  xiterr 1 "selected bootenv '$BOOT_INSTALL' does not exist"
fi

exit 0
